//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 31-Aug-18 10:50:58
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace appglobal.models {

  public partial class gls_model : DbContext {

    public gls_model() :
        base() {
      OnCreated();
    }

    public gls_model(DbContextOptions<gls_model> options) :
        base(options) {
      OnCreated();
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) {
      CustomizeConfiguration(ref optionsBuilder);
      base.OnConfiguring(optionsBuilder);
    }

    partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

    public virtual DbSet<m_user> m_user {
      get;
      set;
    }

    public virtual DbSet<m_user_group> m_user_group {
      get;
      set;
    }

    public virtual DbSet<feature_map> feature_map {
      get;
      set;
    }

    public virtual DbSet<m_feature> m_feature {
      get;
      set;
    }

    public virtual DbSet<m_feature_group> m_feature_group {
      get;
      set;
    }

    public virtual DbSet<m_parameter> m_parameter {
      get;
      set;
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder) {
      this.m_userMapping(modelBuilder);
      this.Customizem_userMapping(modelBuilder);

      this.m_user_groupMapping(modelBuilder);
      this.Customizem_user_groupMapping(modelBuilder);

      this.feature_mapMapping(modelBuilder);
      this.Customizefeature_mapMapping(modelBuilder);

      this.m_featureMapping(modelBuilder);
      this.Customizem_featureMapping(modelBuilder);

      this.m_feature_groupMapping(modelBuilder);
      this.Customizem_feature_groupMapping(modelBuilder);

      this.m_parameterMapping(modelBuilder);
      this.Customizem_parameterMapping(modelBuilder);

      RelationshipsMapping(modelBuilder);
      CustomizeMapping(ref modelBuilder);
    }

    #region m_user Mapping

    private void m_userMapping(ModelBuilder modelBuilder) {
      modelBuilder.Entity<m_user>().ToTable(@"m_user");
      modelBuilder.Entity<m_user>().Property<int>(x => x.m_user_id).HasColumnName(@"m_user_id").IsRequired().ValueGeneratedOnAdd();
      modelBuilder.Entity<m_user>().Property<string>(x => x.user_name).HasColumnName(@"user_name").IsRequired().ValueGeneratedNever().HasMaxLength(50);
      modelBuilder.Entity<m_user>().Property<string>(x => x.user_password).HasColumnName(@"user_password").IsRequired().ValueGeneratedNever().HasMaxLength(100);
      modelBuilder.Entity<m_user>().Property<string>(x => x.user_email).HasColumnName(@"user_email").ValueGeneratedNever().HasMaxLength(50);
      modelBuilder.Entity<m_user>().Property<bool>(x => x.user_active).HasColumnName(@"user_active").IsRequired().ValueGeneratedNever();
      modelBuilder.Entity<m_user>().Property<int>(x => x.m_user_group_id).HasColumnName(@"m_user_group_id").ValueGeneratedNever();
      modelBuilder.Entity<m_user>().HasKey(@"m_user_id");
    }

    partial void Customizem_userMapping(ModelBuilder modelBuilder);

    #endregion

    #region m_user_group Mapping

    private void m_user_groupMapping(ModelBuilder modelBuilder) {
      modelBuilder.Entity<m_user_group>().ToTable(@"m_user_group");
      modelBuilder.Entity<m_user_group>().Property<int>(x => x.m_user_group_id).HasColumnName(@"m_user_group_id").IsRequired().ValueGeneratedOnAdd();
      modelBuilder.Entity<m_user_group>().Property<string>(x => x.user_group_name).HasColumnName(@"user_group_name").IsRequired().ValueGeneratedNever().HasMaxLength(100);
      modelBuilder.Entity<m_user_group>().Property<bool>(x => x.user_group_default).HasColumnName(@"user_group_default").IsRequired().ValueGeneratedNever();
      modelBuilder.Entity<m_user_group>().HasKey(@"m_user_group_id");
    }

    partial void Customizem_user_groupMapping(ModelBuilder modelBuilder);

    #endregion

    #region feature_map Mapping

    private void feature_mapMapping(ModelBuilder modelBuilder) {
      modelBuilder.Entity<feature_map>().ToTable(@"feature_map");
      modelBuilder.Entity<feature_map>().Property<int>(x => x.feature_map_id).HasColumnName(@"feature_map_id").IsRequired().ValueGeneratedOnAdd();
      modelBuilder.Entity<feature_map>().Property<int>(x => x.m_user_group_id).HasColumnName(@"m_user_group_id").ValueGeneratedNever();
      modelBuilder.Entity<feature_map>().Property<int>(x => x.m_feature_id).HasColumnName(@"m_feature_id").ValueGeneratedNever();
      modelBuilder.Entity<feature_map>().HasKey(@"feature_map_id");
    }

    partial void Customizefeature_mapMapping(ModelBuilder modelBuilder);

    #endregion

    #region m_feature Mapping

    private void m_featureMapping(ModelBuilder modelBuilder) {
      modelBuilder.Entity<m_feature>().ToTable(@"m_feature");
      modelBuilder.Entity<m_feature>().Property<int>(x => x.m_feature_id).HasColumnName(@"m_feature_id").IsRequired().ValueGeneratedOnAdd();
      modelBuilder.Entity<m_feature>().Property<string>(x => x.feature_name).HasColumnName(@"feature_name").IsRequired().ValueGeneratedNever().HasMaxLength(100);
      modelBuilder.Entity<m_feature>().Property<int>(x => x.feature_sequence).HasColumnName(@"feature_sequence").IsRequired().ValueGeneratedNever();
      modelBuilder.Entity<m_feature>().Property<string>(x => x.feature_url).HasColumnName(@"feature_url").IsRequired().ValueGeneratedNever().HasMaxLength(255);
      modelBuilder.Entity<m_feature>().Property<string>(x => x.feature_icon).HasColumnName(@"feature_icon").IsRequired().ValueGeneratedNever().HasMaxLength(50);
      modelBuilder.Entity<m_feature>().Property<bool>(x => x.feature_private).HasColumnName(@"feature_private").IsRequired().ValueGeneratedNever();
      modelBuilder.Entity<m_feature>().Property<int>(x => x.m_feature_group_id).HasColumnName(@"m_feature_group_id").ValueGeneratedNever();
      modelBuilder.Entity<m_feature>().HasKey(@"m_feature_id");
    }

    partial void Customizem_featureMapping(ModelBuilder modelBuilder);

    #endregion

    #region m_feature_group Mapping

    private void m_feature_groupMapping(ModelBuilder modelBuilder) {
      modelBuilder.Entity<m_feature_group>().ToTable(@"m_feature_group");
      modelBuilder.Entity<m_feature_group>().Property<int>(x => x.m_feature_group_id).HasColumnName(@"m_feature_group_id").IsRequired().ValueGeneratedOnAdd();
      modelBuilder.Entity<m_feature_group>().Property<string>(x => x.feature_group_name).HasColumnName(@"feature_group_name").IsRequired().ValueGeneratedNever().HasMaxLength(100);
      modelBuilder.Entity<m_feature_group>().HasKey(@"m_feature_group_id");
    }

    partial void Customizem_feature_groupMapping(ModelBuilder modelBuilder);

    #endregion

    #region m_parameter Mapping

    private void m_parameterMapping(ModelBuilder modelBuilder) {
      modelBuilder.Entity<m_parameter>().ToTable(@"m_parameters");
      modelBuilder.Entity<m_parameter>().Property<int>(x => x.m_parameter_id).HasColumnName(@"m_parameter_id").IsRequired().ValueGeneratedOnAdd();
      modelBuilder.Entity<m_parameter>().Property<string>(x => x.parameter_group).HasColumnName(@"parameter_group").IsRequired().ValueGeneratedNever();
      modelBuilder.Entity<m_parameter>().Property<string>(x => x.parameter_key).HasColumnName(@"parameter_key").IsRequired().ValueGeneratedNever();
      modelBuilder.Entity<m_parameter>().Property<string>(x => x.parameter_value).HasColumnName(@"parameter_value").IsRequired().ValueGeneratedNever();
      modelBuilder.Entity<m_parameter>().HasKey(@"m_parameter_id");
    }

    partial void Customizem_parameterMapping(ModelBuilder modelBuilder);

    #endregion

    private void RelationshipsMapping(ModelBuilder modelBuilder) {

      #region m_user Navigation properties

      modelBuilder.Entity<m_user>().HasOne(x => x.m_user_group).WithMany(op => op.m_user).OnDelete(DeleteBehavior.Restrict).IsRequired(true).HasForeignKey(@"m_user_group_id");

      #endregion

      #region m_user_group Navigation properties

      modelBuilder.Entity<m_user_group>().HasMany(x => x.m_user).WithOne(op => op.m_user_group).OnDelete(DeleteBehavior.Restrict).IsRequired(true).HasForeignKey(@"m_user_group_id");
      modelBuilder.Entity<m_user_group>().HasMany(x => x.feature_map).WithOne(op => op.m_user_group).OnDelete(DeleteBehavior.Restrict).IsRequired(true).HasForeignKey(@"m_user_group_id");

      #endregion

      #region feature_map Navigation properties

      modelBuilder.Entity<feature_map>().HasOne(x => x.m_user_group).WithMany(op => op.feature_map).OnDelete(DeleteBehavior.Restrict).IsRequired(true).HasForeignKey(@"m_user_group_id");
      modelBuilder.Entity<feature_map>().HasOne(x => x.m_feature).WithMany(op => op.feature_map).OnDelete(DeleteBehavior.Restrict).IsRequired(true).HasForeignKey(@"m_feature_id");

      #endregion

      #region m_feature Navigation properties

      modelBuilder.Entity<m_feature>().HasMany(x => x.feature_map).WithOne(op => op.m_feature).OnDelete(DeleteBehavior.Restrict).IsRequired(true).HasForeignKey(@"m_feature_id");
      modelBuilder.Entity<m_feature>().HasOne(x => x.m_feature_group).WithMany(op => op.m_feature).IsRequired(true).HasForeignKey(@"m_feature_group_id");

      #endregion

      #region m_feature_group Navigation properties

      modelBuilder.Entity<m_feature_group>().HasMany(x => x.m_feature).WithOne(op => op.m_feature_group).IsRequired(true).HasForeignKey(@"m_feature_group_id");

      #endregion
    }

    partial void CustomizeMapping(ref ModelBuilder modelBuilder);

    public bool HasChanges() {
      return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
    }

    partial void OnCreated();
  }
}

namespace appglobal.models {
  public partial class m_user {

    public m_user() {
      OnCreated();
    }

    public virtual int m_user_id {
      get;
      set;
    }

    public virtual string user_name {
      get;
      set;
    }

    public virtual string user_password {
      get;
      set;
    }

    public virtual string user_email {
      get;
      set;
    }

    public virtual bool user_active {
      get;
      set;
    }

    public virtual int m_user_group_id {
      get;
      set;
    }

    public virtual m_user_group m_user_group {
      get;
      set;
    }

    #region Extensibility Method Definitions

    partial void OnCreated();

    #endregion
  }
  public partial class m_user_group {

    public m_user_group() {
      this.m_user = new List<m_user>();
      this.feature_map = new List<feature_map>();
      OnCreated();
    }

    public virtual int m_user_group_id {
      get;
      set;
    }

    public virtual string user_group_name {
      get;
      set;
    }

    public virtual bool user_group_default {
      get;
      set;
    }

    public virtual IList<m_user> m_user {
      get;
      set;
    }

    public virtual IList<feature_map> feature_map {
      get;
      set;
    }

    #region Extensibility Method Definitions

    partial void OnCreated();

    #endregion
  }
  public partial class feature_map {

    public feature_map() {
      OnCreated();
    }

    public virtual int feature_map_id {
      get;
      set;
    }

    public virtual int m_user_group_id {
      get;
      set;
    }

    public virtual int m_feature_id {
      get;
      set;
    }

    public virtual m_user_group m_user_group {
      get;
      set;
    }

    public virtual m_feature m_feature {
      get;
      set;
    }

    #region Extensibility Method Definitions

    partial void OnCreated();

    #endregion
  }
  public partial class m_feature {

    public m_feature() {
      this.feature_map = new List<feature_map>();
      OnCreated();
    }

    public virtual int m_feature_id {
      get;
      set;
    }

    public virtual string feature_name {
      get;
      set;
    }

    public virtual int feature_sequence {
      get;
      set;
    }

    public virtual string feature_url {
      get;
      set;
    }

    public virtual string feature_icon {
      get;
      set;
    }

    public virtual bool feature_private {
      get;
      set;
    }

    public virtual int m_feature_group_id {
      get;
      set;
    }

    public virtual IList<feature_map> feature_map {
      get;
      set;
    }

    public virtual m_feature_group m_feature_group {
      get;
      set;
    }

    #region Extensibility Method Definitions

    partial void OnCreated();

    #endregion
  }
  public partial class m_feature_group {

    public m_feature_group() {
      this.m_feature = new List<m_feature>();
      OnCreated();
    }

    public virtual int m_feature_group_id {
      get;
      set;
    }

    public virtual string feature_group_name {
      get;
      set;
    }

    public virtual IList<m_feature> m_feature {
      get;
      set;
    }

    #region Extensibility Method Definitions

    partial void OnCreated();

    #endregion
  }
  public partial class m_parameter {

    public m_parameter() {
      OnCreated();
    }

    public virtual int m_parameter_id {
      get;
      set;
    }

    public virtual string parameter_group {
      get;
      set;
    }

    public virtual string parameter_key {
      get;
      set;
    }

    public virtual string parameter_value {
      get;
      set;
    }

    #region Extensibility Method Definitions

    partial void OnCreated();

    #endregion
  }

}
