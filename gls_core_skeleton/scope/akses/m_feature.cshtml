@page
@namespace appglobal
@using appglobal.models
@using Microsoft.EntityFrameworkCore
@model m_featureModel
@{
  string f = Request.Query["f"];
  gls_model _context = new gls_model(AppGlobal.get_db_option()); //simplifying context initializer by override
  ViewData["read-only"] = false; //check here the user level and set read-only property accordingly
}
@if (f == "base")
{
  @await Html.PartialAsync("../_template/crud_base.cshtml")
}
else if (f == "table")
{
  //create table view here
  var table_data = _context.m_feature.Include(e => e.m_feature_group).ToList();

  <table class='table table-xs table-condensed table-bordered' id='master_table'>
    <thead>
      <tr>
        <th>Feature Group</th>
        <th>Nama</th>
        <th>Urutan</th>
        <th>URL</th>
        <th>Icon</th>
        <th>Privat?</th>
        <th style='width:150px'>Aksi</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var table_data_row in table_data)
      {
        //modify displayed action_button here
        string action_button = "";
        if (ViewData["read-only"].Equals(false))
        {
          action_button = crud_base.get_edit_button(table_data_row.m_feature_id) + crud_base.get_delete_button(table_data_row.m_feature_id);
        }
        string privat = table_data_row.feature_private == true ? "Ya" : "Tidak";
        <tr>
          <td> @table_data_row.m_feature_group.feature_group_name </td>
          <td> @table_data_row.feature_name </td>
          <td> @table_data_row.feature_sequence </td>
          <td> @table_data_row.feature_url </td>
          <td> @table_data_row.feature_icon </td>
          <td> @privat </td>
          <td> @{WriteLiteral(action_button);} </td>
        </tr>
      }
    </tbody>
  </table>
  <script>
    $("#master_table").dataTable(); //invoke dataTable here, put custom options here
  </script>
}
else if (f == "insert")
{
  var list_m_feature_group = _context.m_feature_group.Select(e => new { e.m_feature_group_id, e.feature_group_name }).ToArray();

  //create insert form here
  string input_groups =
    crud_base.get_dropdown_group("m_feature_group_id", "Feature Group", list_m_feature_group) +
    crud_base.get_input_group("feature_name", "Nama Feature", true, "text") +
    crud_base.get_input_group("feature_sequence", "Urutan Feature", true, "number") +
    crud_base.get_input_group("feature_url", "URL Feature", true, "text") +
    crud_base.get_input_group("feature_icon", "Icon Feature", true, "text") +
    crud_base.get_toggle_group("feature_private", "Feature Privat?", true)
  ;
  WriteLiteral(input_groups);
}
else if (f == "edit")
{
  var list_m_feature_group = _context.m_feature_group.Select(e => new { e.m_feature_group_id, e.feature_group_name }).ToArray();

  //create edit form here
  int id = Convert.ToInt32(Request.Query["id"]);
  var feature = _context.m_feature.SingleOrDefault(e => e.m_feature_id == id); //get specific row based on id
  AppGlobal.console_log("fp", feature.feature_private+"");

  string input_groups =
    crud_base.get_input("m_feature_id", "hidden", id + "") + //id untuk update parameter
    crud_base.get_dropdown_group("m_feature_group_id", "Feature Group", list_m_feature_group, feature.m_feature_group_id + "") +
    crud_base.get_input_group("feature_name", "Nama Feature", true, "text", feature.feature_name) +
    crud_base.get_input_group("feature_sequence", "Urutan Feature", true, "number", feature.feature_sequence + "") +
    crud_base.get_input_group("feature_url", "URL Feature", true, "text", feature.feature_url) +
    crud_base.get_input_group("feature_icon", "Icon Feature", true, "text", feature.feature_icon) +
    crud_base.get_toggle_group("feature_private", "Feature Privat?", feature.feature_private)
  ;
  WriteLiteral(input_groups);
}